import java.io.*;
import java.net.*;
import java.util.*;

public class QuoteServerThread extends Thread {


    protected DatagramSocket socket = null;
    protected BufferedReader in = null;
    protected boolean players = true;

    protected float[] nums = {(float) 42.78, (float)78.42,(float) 28.47,(float) 47.28 };


    public QuoteServerThread(String name) throws IOException {
	       super(name);
	      socket = new DatagramSocket(7742);


	/*try {
	    in = new BufferedReader(new FileReader("one-liners.txt"));
	}
	catch (FileNotFoundException e) {
	    System.err.println("Could not open quote file. Serving Time Instead");
	}*/
    }


    public float[] assignNums (float[] newNums) {
    	float [] old = nums;
    	nums = newNums;
    	return old;
    }

    public float[] getNums () {
    	return nums;
    }

    public void run () {

    	while (players) {
    	    try {

    		byte[] buf = new byte [256];

    		//recieving request
    		DatagramPacket packet = new DatagramPacket(buf, buf.length);
    		socket.receive(packet);
    		String coord = new String(packet.getData());
    		//assignNums(getVals(coord));
        int port = packet.getPort();
        InetAddress address = packet.getAddress();
    		System.out.println("FROM CLIENT AT PORT " + port + ": " + coord);

    		String response = Arrays.toString(nums);
    		response += "help!!!";

    		buf = response.getBytes();

    		//send response to client address and port
    		packet = new DatagramPacket(buf, buf.length, address, port);
    		socket.send(packet);
    		System.out.println("New Data Sent From Server");
    	    } catch (IOException e) {
    		e.printStackTrace();
    		players = false;
    	    }
    	}
    	socket.close();
    }



    private float[] getVals (String inp) {
    	float[] out = new float[4];
    	int st = 0;
    	int ind = 0;
    	for (int i = 0; i < inp.length(); i++) {
    	    if (inp.substring(i, i + 1).equals(",")) {
    		out[ind] = Float.parseFloat(inp.substring(st,i));
    		ind++;
    		st = i + 1;
    	    }
    	    else if (i == inp.length() - 1) {
    		out[ind] = Float.parseFloat(inp.substring(st,inp.length()));
    		ind++;
    	    }
    	}
    	return out;
    }

}
